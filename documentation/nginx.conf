#user  nobody;
worker_processes  auto;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    #default_type  application/octet-stream;
    default_type                application/json;

    keepalive_timeout           5m;
    send_timeout                6m;
    init_by_lua                 'require "cjson"';
    #ssl_session_cache           shared:SSL:32m;
    ssl_session_timeout         5m;
    server_tokens               off;
    add_header                  X-XSS-Protection '1; mode=block';
    add_header                  X-Content-Type-Options nosniff;


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #keepalive_timeout  65;

    #gzip  on;


    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }


    proxy_redirect              off;
    proxy_set_header            Host $host;
    proxy_set_header            X-Real-IP $remote_addr;
    proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_connect_timeout       2m;
    proxy_send_timeout          2m;
    proxy_read_timeout          2m;

    proxy_buffer_size           4k;
    proxy_buffers               4 32k;
    proxy_busy_buffers_size     64k;
    proxy_temp_file_write_size  64k;

    client_max_body_size        1m;
    client_body_buffer_size     128k;

#    limit_req_zone              $binary_remote_addr zone=grafana:5m rate=120r/s;




# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Website @ yourdomain.com
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    server {
        listen       80;
        server_name localhost
        server_name  yourdomain.com;
        #return 301 https://yourdomain.com$request_uri;
    }
    
     server {
        listen       443 ssl default_server deferred;
#        server_name  localhost;
        server_name   yourdomain.com;

        ssl_certificate      /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/yourdomain.com/privkey.pem;
        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers               HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        add_header                Strict-Transport-Security 'max-age=63072000; includeSubdomains';
       # ssl_session_cache    shared:SSL:50m;
        ssl_session_timeout  5m;

        ssl_stapling              on;
        ssl_stapling_verify       on;
        ssl_trusted_certificate   /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
        resolver                  1.1.1.1 8.8.8.8 8.8.4.4 9.9.9.9 valid=300s;
        resolver_timeout          5s;



        location /test/ {
        proxy_pass http://test/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        }



        location / {
            root   html/yourdomain.com;
            index  index.html index.htm;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}





# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Database @ db.yourdomain.com
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # HTTP server to redirect all 80 traffic to SSL/HTTPS
  server {
    listen 80;
    server_name db.yourdomain.com;
    # Tell all requests to port 80 to be 302 redirected to HTTPS
    return 302 https://$host$request_uri;
  }

  # HTTPS server
  server {
    listen 443 ssl;
    #listen 6000;
    ssl on;
    server_name db.yourdomain.com;

    ssl_certificate           /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers               HIGH:!aNULL:!MD5;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;

    # Managing literal requests to the JupyterHub front end
    location / {
        proxy_pass http://127.0.0.1:6000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
  }





# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# PGAdmin @ pg.yourdomain.com
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # HTTP server to redirect all 80 traffic to SSL/HTTPS
  server {
    listen 80;
    server_name pg.yourdomain.com;
    # Tell all requests to port 80 to be 302 redirected to HTTPS
    return 302 https://$host$request_uri;
  }

  # HTTPS server
  server {
    listen 443 ssl;
    ssl on;
    server_name pg.yourdomain.com;

    ssl_certificate           /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers               HIGH:!aNULL:!MD5;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;

    # Managing literal requests to the JupyterHub front end
    location / {
        proxy_pass http://127.0.0.1:5555;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
  }





# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Flux DB @ flux.yourdomain.com
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # HTTP server to redirect all 80 traffic to SSL/HTTPS
  server {
    listen 80;
    server_name flux.yourdomain.com;
    # Tell all requests to port 80 to be 302 redirected to HTTPS
    return 302 https://$host$request_uri;
  }

  # HTTPS server
  server {
    listen 443 ssl;
    ssl on;
    server_name flux.yourdomain.com;

    ssl_certificate           /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers               HIGH:!aNULL:!MD5;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;

    # Managing literal requests to the JupyterHub front end
    location / {
        proxy_pass http://127.0.0.1:8086;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
  }
  




#========================================
#
#              EMRP
#
#========================================



# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# EMRP Dashboard @ em.yourdomain.com 5022
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # HTTP server to redirect all 80 traffic to SSL/HTTPS
  server {
    listen 80;
    server_name em.yourdomain.com;
    # Tell all requests to port 80 to be 302 redirected to HTTPS
    return 302 https://$host$request_uri;
  }

  # HTTPS server
  server {
    listen 443 ssl;
    ssl on;
    server_name em.yourdomain.com;

    ssl_certificate           /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers               HIGH:!aNULL:!MD5;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;

    # Managing literal requests to the JupyterHub front end
    location / {
        proxy_pass http://127.0.0.1:5022;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
  }





}

